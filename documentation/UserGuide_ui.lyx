#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation skip
\defskip smallskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title

\series bold
User Interface (ui) for the Arduino
\end_layout

\begin_layout Author
Garrett Berg, Cloudform Design, garrett@cloudformdesign.com
\end_layout

\begin_layout Standard

\series bold
LICENSE: 
\series default
This library is released under the FreeBSD License, if you need a copy go
 to:
\begin_inset CommandInset href
LatexCommand href
name " http://www.freebsd.org/copyright/freebsd-license.html"
target " http://www.freebsd.org/copyright/freebsd-license.html"

\end_inset


\end_layout

\begin_layout Standard

\series bold
Copyright: 
\series default
Garrett Berg 
\begin_inset CommandInset href
LatexCommand href
name "cloudformdesign.com"
target "cloudformdesign.com"

\end_inset

, 
\begin_inset CommandInset href
LatexCommand href
name "garrett@cloudformdesign.com"
target "garrett@cloudformdesign.com"

\end_inset


\end_layout

\begin_layout Section*
Introduction
\end_layout

\begin_layout Standard
There was once upon a time when I tried to code my own user interface.
 It went a little something like this:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

void mythread(){
\end_layout

\begin_layout Plain Layout

  static int place = 0;
\end_layout

\begin_layout Plain Layout

  if(place) == 0){
\end_layout

\begin_layout Plain Layout

    do something...
\end_layout

\begin_layout Plain Layout

    place = 1;
\end_layout

\begin_layout Plain Layout

  }
\end_layout

\begin_layout Plain Layout

  if(place == 1)
\end_layout

\begin_layout Plain Layout

     something else;
\end_layout

\begin_layout Plain Layout

     place = 2;
\end_layout

\begin_layout Plain Layout

  ...
 etc.
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void loop(){
\end_layout

\begin_layout Plain Layout

  mythread();
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset

This way of doing things had serious flaws, too many to go into.
 
\end_layout

\begin_layout Standard
Then I came across the protothreads library (included in this folder as
 
\series bold
pt.h
\series default
) and everything was better...
 or was it.
\end_layout

\begin_layout Standard
I still wanted to be able to actually 
\shape italic
interface
\shape default

\begin_inset space ~
\end_inset

with my functions and variables through the command terminal.
\end_layout

\begin_layout Standard
So, to do this I wrote 
\series bold
threads.h
\series default
 and 
\series bold
ui.h
\series default
.
 With these two libraries it is now possible to:
\end_layout

\begin_layout Itemize
Create threads easily -- a thread is a function that will be called frequently,
 who's status can be observed externally, and who can be killed by the implement
ed task manager.
 Threads are easy to create and much easier to maintain than doing similar
 things any other way.
\end_layout

\begin_layout Itemize
Access variables easily : expose_variable(
\begin_inset Quotes eld
\end_inset

myvar
\begin_inset Quotes erd
\end_inset

, name) and you can access it with 
\begin_inset Quotes eld
\end_inset

v myvar
\begin_inset Quotes erd
\end_inset

 on the serial terminal.
\end_layout

\begin_layout Itemize
Call functions: same as exposing variables.
\end_layout

\begin_layout Section*
Overview
\end_layout

\begin_layout Standard
Please see UserGuide_threading.h for the functions that you can call.
 See the example 
\series bold
threading_ex 
\series default
for code examples.
\end_layout

\begin_layout Standard
The best way to see the power of the threading module is to see it in action.
 Do the following:
\end_layout

\begin_layout Itemize
Load up 
\series bold
threading_ex
\end_layout

\begin_layout Itemize
Program it to your arduino
\end_layout

\begin_layout Itemize
Set your baud rate = 57600 and set it to send both NR and CR characters
 on each enter.
\end_layout

\begin_layout Itemize
Play with it!
\end_layout

\begin_deeper
\begin_layout Itemize
type 
\begin_inset Quotes eld
\end_inset

record
\begin_inset Quotes erd
\end_inset

 to do a recording of the LED output
\end_layout

\begin_layout Itemize
\begin_inset Quotes eld
\end_inset


\series bold
kill blink
\begin_inset Quotes erd
\end_inset

 
\series default
will kill the blink and 
\begin_inset Quotes eld
\end_inset


\series bold
blink 1000
\begin_inset Quotes erd
\end_inset

 
\series default
will start it again with a period of 1000ms (1 second)
\end_layout

\begin_layout Itemize
Be sure to type 
\series bold

\begin_inset Quotes eld
\end_inset

mon
\begin_inset Quotes erd
\end_inset

 -- 
\series default
This starts the System Monitor and outputs useful information about how
 long each thread is taking and how much memory you have available.
\end_layout

\begin_layout Itemize
\begin_inset Quotes eld
\end_inset


\series bold
v led
\begin_inset Quotes erd
\end_inset

 
\series default
Will give you the value of the led.
\end_layout

\begin_layout Itemize
\begin_inset Quotes eld
\end_inset

?
\begin_inset Quotes erd
\end_inset

 will give you all the options
\end_layout

\end_deeper
\begin_layout Itemize
Check out the code and read the documentation to see how things are working!
\end_layout

\begin_layout Itemize
Check out the other documentation:
\end_layout

\begin_deeper
\begin_layout Itemize

\series bold
UserGuide_errorhandling
\series default

\begin_inset space ~
\end_inset

is how you can generate error messages and do error handling.
 It also has logging.
\end_layout

\begin_layout Itemize

\series bold
UserGuide_threading
\series default
 is a useful reference on how to create your threads
\end_layout

\begin_layout Itemize

\series bold
README_pt.txt 
\series default
The protothread library is how you create your threads -- it would be helpful
 to read this.
\end_layout

\end_deeper
\begin_layout Subsection*
Code Overview
\end_layout

\begin_layout Itemize

\series bold
ui_setup_std(F, V, T) ::
\end_layout

\begin_deeper
\begin_layout Itemize
Same as thread_setup(F, V, T) (see UserGuide_threading), but also sets up
 the User Interface for serial communication.
\end_layout

\end_deeper
\begin_layout Itemize

\series bold
ui_pat_dog() ::
\end_layout

\begin_deeper
\begin_layout Itemize
The user interface uses the watchdog timer so that if your thread times
 out (longer than 2 seconds) it will automatically reset AND print which
 function/thread it failed (very useful).
 If your function is going to take longer than 2 seconds, you need to call
 this function periodically.
 However, this is not recommended as it is bad policy for threading.
 See examples and README_pt.txt to see how to avoid this.
\end_layout

\begin_deeper
\begin_layout Itemize
Note: do NOT call wdt_enable(...) -- it will break the functionality that prints
 which thread failed.
 
\end_layout

\end_deeper
\end_deeper
\begin_layout Itemize

\series bold
call_name(
\begin_inset Quotes eld
\end_inset

mon
\begin_inset Quotes erd
\end_inset

) ::
\end_layout

\begin_deeper
\begin_layout Itemize
Starts the system monitor from software, good thing in the setup function.
\end_layout

\end_deeper
\begin_layout Itemize

\series bold
call_name(
\begin_inset Quotes eld
\end_inset

?
\begin_inset Quotes erd
\end_inset

) ::
\end_layout

\begin_deeper
\begin_layout Itemize
Software printout of options.
 Good thing in the setup function.
\end_layout

\end_deeper
\begin_layout Itemize

\series bold
See UserGuide_threading 
\series default
for how to expose threads, etc.
\end_layout

\begin_layout Section*
Serial Port
\end_layout

\begin_layout Standard
Threading operates as simply as it possibly can.
 You can access either functions or variables through it's interface.
 In summary:
\end_layout

\begin_layout Itemize
The following terminal commands are supported:
\end_layout

\begin_deeper
\begin_layout Itemize

\series bold
v
\series default
 ::VARNAME
\begin_inset Quotes erd
\end_inset

 -- Gives you the value of variable VARNAME in hex that you have exposed
\end_layout

\begin_layout Itemize

\series bold
? :: 
\series default
print all options for threads, variables and function calls.
\end_layout

\begin_layout Itemize

\series bold
mon ::
\series default
 starts the system monitor
\end_layout

\begin_layout Itemize

\series bold
kill [process name] :: 
\series default
kills the indicated process name
\end_layout

\begin_layout Itemize

\series bold
(exposed thread/function) [input] :: 
\series default
calls a thread or function that you have exposed.
 Sends it input
\end_layout

\end_deeper
\end_body
\end_document
