#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation skip
\defskip smallskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title

\series bold
User Interface (ui) for the Arduino
\end_layout

\begin_layout Author
Garrett Berg, Cloudform Design, garrett@cloudformdesign.com
\end_layout

\begin_layout Standard

\series bold
LICENSE: 
\series default
This library is released under the FreeBSD License, if you need a copy go
 to:
\begin_inset CommandInset href
LatexCommand href
name " http://www.freebsd.org/copyright/freebsd-license.html"
target " http://www.freebsd.org/copyright/freebsd-license.html"

\end_inset


\end_layout

\begin_layout Standard

\series bold
Copyright: 
\series default
Garrett Berg 
\begin_inset CommandInset href
LatexCommand href
name "cloudformdesign.com"
target "cloudformdesign.com"

\end_inset

, 
\begin_inset CommandInset href
LatexCommand href
name "garrett@cloudformdesign.com"
target "garrett@cloudformdesign.com"

\end_inset


\end_layout

\begin_layout Section*
Introduction
\end_layout

\begin_layout Standard
There was once upon a time when I tried to code my own user interface.
 It went a little something like this:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

void mythread(){
\end_layout

\begin_layout Plain Layout

  static int place = 0;
\end_layout

\begin_layout Plain Layout

  if(place) == 0){
\end_layout

\begin_layout Plain Layout

    do something...
\end_layout

\begin_layout Plain Layout

    place = 1;
\end_layout

\begin_layout Plain Layout

  }
\end_layout

\begin_layout Plain Layout

  if(place == 1)
\end_layout

\begin_layout Plain Layout

     something else;
\end_layout

\begin_layout Plain Layout

     place = 2;
\end_layout

\begin_layout Plain Layout

  ...
 etc.
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void loop(){
\end_layout

\begin_layout Plain Layout

  mythread();
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
This way of doing things had serious flaws, too many to go into.
 
\end_layout

\begin_layout Standard
Then I came across the protothreads library (included in this folder as
 
\series bold
pt.h
\series default
) and everything was better...
 or was it?
\end_layout

\begin_layout Standard
I still wanted to be able to actually 
\shape italic
interface
\shape default

\begin_inset space ~
\end_inset

with my functions and variables through the command terminal.
\end_layout

\begin_layout Standard
So, to do this I wrote 
\series bold
threads.h
\series default
 and 
\series bold
ui.h
\series default
.
 With these two libraries it is now possible to:
\end_layout

\begin_layout Itemize
Create threads easily -- a thread is a function that will be called every
 loop, who's status can be observed externally, and who can be killed by
 the implemented task manager.
 Threads are easy to create and much easier to maintain than doing similar
 things any other way.
\end_layout

\begin_layout Itemize
Access variables easily : after exposing a variable, you can access it with
 
\begin_inset Quotes eld
\end_inset

v myvar
\begin_inset Quotes erd
\end_inset

 on the serial terminal, or set with 
\begin_inset Quotes eld
\end_inset

v myvar value
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Itemize
Call functions: same as exposing variables.
\end_layout

\begin_layout Itemize
Functions and variables take up zero SRAM, and threads only take up 4 bytes
 each! This allows you to easily construct a very large user interface through
 exposed functions and variables without worrying about SRAM usage.
\end_layout

\begin_layout Section*
Tutorial
\end_layout

\begin_layout Standard
Please see UserGuide_threading.h for the functions that you can call.
 See the example 
\series bold
ui_led_example4 
\series default
for code examples.
\end_layout

\begin_layout Standard
The best way to see the power of the threading module is to see it in action.
 Do the following:
\end_layout

\begin_layout Itemize
Load up 
\series bold
ui_led_example4
\end_layout

\begin_layout Itemize
Program it to your arduino
\end_layout

\begin_layout Itemize
Set your baud rate = 57600 and set it to send both NR and CR characters
 on each enter.
\end_layout

\begin_layout Itemize
Play with it!
\end_layout

\begin_deeper
\begin_layout Itemize
type 
\series bold

\begin_inset Quotes eld
\end_inset

?
\series default

\begin_inset Quotes erd
\end_inset

 to get info on commands you can type.
\end_layout

\begin_layout Itemize
"
\series bold
v sub_time 500
\series default
" -- you will see the led's blink much faster (500ms is being taken off
 both periods)
\end_layout

\begin_layout Itemize
"
\series bold
v sub_time
\series default
" -- get the value of sub_time in hex
\end_layout

\begin_layout Itemize
"
\series bold
v sub_time 0
\series default
" -- set it back to 0 (slow blinking)
\end_layout

\begin_layout Itemize
"
\series bold
k led1
\series default
" -- will make it so that only 1 thread is blinking (blinks at period of
 900ms)
\end_layout

\begin_layout Itemize

\series bold
\begin_inset Quotes eld
\end_inset

k led2
\begin_inset Quotes erd
\end_inset

 
\series default
-- everything will be killed (no blinking)
\end_layout

\begin_layout Itemize

\series bold
\begin_inset Quotes eld
\end_inset

reinit
\begin_inset Quotes erd
\end_inset

 
\series default
-- calls the reinit function, everything will be set to default values!
\end_layout

\end_deeper
\begin_layout Itemize
Check out the code and read the documentation to see how things are working!
\end_layout

\begin_layout Itemize
Check out the other documentation:
\end_layout

\begin_deeper
\begin_layout Itemize

\series bold
UserGuide_errorhandling
\series default

\begin_inset space ~
\end_inset

is how you can generate error messages and do error handling.
 It also has logging.
\end_layout

\begin_layout Itemize

\series bold
UserGuide_threading
\series default
 is a useful reference on how to create your threads
\end_layout

\begin_layout Itemize

\series bold
UserGuide_pt 
\series default
The protothread library is how you create your threads -- it would be helpful
 to read this.
\end_layout

\end_deeper
\begin_layout Section*
Serial Port
\end_layout

\begin_layout Standard
Threading operates as simply as it possibly can.
 You can access either functions or variables through it's interface.
 In summary:
\end_layout

\begin_layout Itemize
The following terminal commands are supported:
\end_layout

\begin_deeper
\begin_layout Itemize

\series bold
? :: 
\series default
print all options for threads, variables and function calls.
\end_layout

\begin_layout Itemize

\series bold
t (exposed thread) [input] :: 
\series default
calls an exposed thread, sends it input.
\end_layout

\begin_layout Itemize

\series bold
v
\series default
 ::VARNAME
\begin_inset Quotes erd
\end_inset

 -- Gives you the value of variable VARNAME in hex that you have exposed
\end_layout

\begin_layout Itemize

\series bold
k [process name] :: 
\series default
kills the indicated process name (integer or exposed name)
\end_layout

\begin_layout Itemize

\series bold
(exposed function) [input] :: 
\series default
calls a function that you have exposed.
 Sends it input
\end_layout

\end_deeper
\begin_layout Section*
Overview
\end_layout

\begin_layout Standard
The ui module is almost exactly the same as the threading module.
 The only difference is that you can also expose variables and functions.
 After you have exposed things, you will be able to see them (by typing
 ?) as well as interract with them (threads can be killed and scheduled,
 functions can be called with inputs, variables can be viewed and set)
\end_layout

\begin_layout Itemize

\series bold
setup_ui(Mem_Amount) ::
\end_layout

\begin_deeper
\begin_layout Itemize
Must be called after expose_threads, expose_functions, expose_variables.
\end_layout

\begin_layout Itemize
If one of these is not exposed, 
\series bold
no_NAME()
\series default
 must be called.
 i.e.
 if you are not using any functions, call 
\series bold
no_functions()
\end_layout

\begin_layout Itemize
Mem_Amount == the maximum amount of dynamic memory that your program will
 use.
 See 
\series bold
UserGuide_ReMem
\series default
 for more details
\end_layout

\end_deeper
\begin_layout Itemize

\series bold
expose_functions(...) ::
\end_layout

\begin_deeper
\begin_layout Itemize
exactly the same as exposing threads (even the funciton type is the same),
 except you must wrap each value in 
\series bold
UI_F
\series default
 instead of 
\series bold
TH_T
\series default
.
 See 
\series bold
expose_threads
\series default
 in 
\series bold
UserGuide_threading
\end_layout

\end_deeper
\begin_layout Itemize

\series bold
expose_variables(...) ::
\end_layout

\begin_deeper
\begin_layout Itemize
Exposing variables is slightly different.
 This is because the compiler can't store this type directly into PROGMEM.
 To expose variables, you must first create pointers to them using 
\series bold
UI_V(pointer, value)
\series default
 and then expose them, wrapping their pointers with 
\series bold
UI_VA
\series default
:
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

// variables we will be exposing
\end_layout

\begin_layout Plain Layout

uint8_t myint;
\end_layout

\begin_layout Plain Layout

float myfloat;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// This creates pointers v1 and v2 to each variable
\end_layout

\begin_layout Plain Layout

UI_V(v1, myint);
\end_layout

\begin_layout Plain Layout

UI_V(v2, myfloat);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// put pointers into exposed array
\end_layout

\begin_layout Plain Layout

expose_variables(UI_VA(v1), UI_VA(v2));
\end_layout

\end_inset


\end_layout

\begin_layout Itemize

\series bold
expose_thread_names(...), expose_function_names(...), expose_variable_names(...)
 ::
\end_layout

\begin_deeper
\begin_layout Itemize
Used to access via terminal
\end_layout

\begin_layout Itemize
If you use these, make sure to name every exposed thread/function/variable.
 For instance, if you have two threads then include exactly two names (order
 is important)
\end_layout

\begin_layout Itemize
Must be exposed in a similar way to variables:
\end_layout

\begin_layout Itemize
Must call associated 
\series bold
set_NAME_names() 
\series default
in the setup function.
 See below.
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

UI_STR(tn1, mythread);
\end_layout

\begin_layout Plain Layout

expose_thread_names(tn1);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

UI_STR(fn1, myfunc1);
\end_layout

\begin_layout Plain Layout

UI_STR(fn2, myfunc2);
\end_layout

\begin_layout Plain Layout

expose_function_names(fn1, fn2);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

UI_STR(vn1, myvar);
\end_layout

\begin_layout Plain Layout

expose_variable_names(vn1);
\end_layout

\end_inset


\end_layout

\begin_layout Itemize

\series bold
expose_default_thread_names()
\end_layout

\begin_deeper
\begin_layout Itemize
Only use if you are not exposing ANY threads
\end_layout

\begin_layout Itemize
Allows you to see the default thread 
\series bold
ui
\series default
 -- or the user interface, and kill it with 
\series bold
kill ui
\end_layout

\begin_layout Itemize
This function is not all that useful
\end_layout

\end_deeper
\begin_layout Itemize

\series bold
expose_default_function_names() ::
\end_layout

\begin_deeper
\begin_layout Itemize
Only use if you are not exposing ANY functions
\end_layout

\begin_layout Itemize
Allows you to see and call the default functions by name: 
\series bold
?, t, v, k
\end_layout

\begin_layout Itemize
Useful if you are not using any functions
\end_layout

\end_deeper
\begin_layout Itemize

\series bold
set_thread_names(), set_function_names(), set_variable_names() ::
\end_layout

\begin_deeper
\begin_layout Itemize
Must be called in the setup function if names are exposed.
\end_layout

\begin_layout Itemize
Can also call 
\series bold
set_all_names() 
\series default
to do all of them at once.
\end_layout

\end_deeper
\end_body
\end_document
