#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation skip
\defskip smallskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title

\series bold
Threading
\end_layout

\begin_layout Author
Garrett Berg, Cloudform Design, garrett@cloudformdesign.com
\end_layout

\begin_layout Standard

\series bold
LICENSE: 
\series default
This library is released under the FreeBSD License, if you need a copy go
 to:
\begin_inset CommandInset href
LatexCommand href
name " http://www.freebsd.org/copyright/freebsd-license.html"
target " http://www.freebsd.org/copyright/freebsd-license.html"

\end_inset


\end_layout

\begin_layout Standard

\series bold
Copyright: 
\series default
Garrett Berg 
\begin_inset CommandInset href
LatexCommand href
name "cloudformdesign.com"
target "cloudformdesign.com"

\end_inset

, 
\begin_inset CommandInset href
LatexCommand href
name "garrett@cloudformdesign.com"
target "garrett@cloudformdesign.com"

\end_inset


\end_layout

\begin_layout Section*
Summary
\end_layout

\begin_layout Standard
The threading.h library was created to make threading simpler for microcontroller
s, while still using a very small footprint.
 It can also be integreated with the User Interface (ui.h) library to create
 a simple user interface
\end_layout

\begin_layout Standard
This module supports threading through the 
\shape italic
protothreads
\shape default
 library.
 Each function has an associated thread that can be called.
 This library can make it significantly easier to manage multiple processes.
 See the 
\series bold
threading_led_example2
\series default
.
 Also see 
\series bold
Userguide_protothreads 
\series default
for details on how to use protothreads.
\end_layout

\begin_layout Subsection*
Overview
\end_layout

\begin_layout Itemize

\series bold
thread_setup(num_threads) ::
\end_layout

\begin_deeper
\begin_layout Itemize
Must be called in the 
\series bold
setup
\series default

\begin_inset space ~
\end_inset

function, before any threads are exposed or called.
 You must keep track of the number of variables, functions, and threads
 you use and input them.
 See 
\begin_inset Quotes eld
\end_inset

pt_led_example2
\begin_inset Quotes erd
\end_inset

 for an example.
 The number can be higher than what you actually use (but uses more memory).
\end_layout

\begin_layout Itemize
If you are using the ui.h module, use 
\series bold
ui_setup(T, F, V) 
\series default
instead
\end_layout

\end_deeper
\begin_layout Itemize

\series bold
expose_thread(thread_function) ::
\end_layout

\begin_deeper
\begin_layout Itemize
This exposes a thread and lets you schedule it later.
\end_layout

\begin_layout Itemize
The function must be of type: uint8_t thfun(pthread *pt);
\end_layout

\begin_layout Itemize
You must pay attention to the order that you expose threads, and not expose
 more than the value you gave to thread_setup.
\end_layout

\end_deeper
\begin_layout Itemize

\series bold
schedule_thread(uint8_t thread_index) ::
\end_layout

\begin_deeper
\begin_layout Itemize
Schedules a thread to be called by thread_loop
\end_layout

\end_deeper
\begin_layout Itemize

\series bold
thread_loop() ::
\end_layout

\begin_deeper
\begin_layout Itemize
This should be called in your loop function.
 It is what checks to see if there is new input and if any threads need
 to be run.
\end_layout

\begin_layout Itemize
If you are using the ui.h module, call 
\series bold
ui_loop()
\series default
 instead
\end_layout

\end_deeper
\begin_layout Itemize

\series bold
kill_thread(uint8_t) ::
\end_layout

\begin_deeper
\begin_layout Itemize
the thread's pt is set to KILL.
 When the thread is next called, it will jump to PT_KILL if it is defined,
 or simply exit if it is not.
\end_layout

\end_deeper
\end_body
\end_document
