#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation skip
\defskip smallskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
User Interface (ui) for the Arduino
\end_layout

\begin_layout Section*
Introduction
\end_layout

\begin_layout Standard
There was once upon a time when I tried to code my own user interface.
 It went a little something like this:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

void mythread(){
\end_layout

\begin_layout Plain Layout

  static int place = 0;
\end_layout

\begin_layout Plain Layout

  if(place) == 0){
\end_layout

\begin_layout Plain Layout

    do something...
\end_layout

\begin_layout Plain Layout

    place = 1;
\end_layout

\begin_layout Plain Layout

  }
\end_layout

\begin_layout Plain Layout

  if(place == 1)
\end_layout

\begin_layout Plain Layout

     something else;
\end_layout

\begin_layout Plain Layout

     place = 2;
\end_layout

\begin_layout Plain Layout

  ...
 etc.
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void loop(){
\end_layout

\begin_layout Plain Layout

  mythread();
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset

This way of doing things had serious flaws, too many to go into.
 
\end_layout

\begin_layout Standard
Then I came across the protothreads library (included in this folder as
 
\series bold
pt.h
\series default
) and everything was better...
 or was it.
\end_layout

\begin_layout Standard
I still wanted to be able to actually 
\shape italic
interface
\shape default

\begin_inset space ~
\end_inset

with my functions and variables through the command terminal.
\end_layout

\begin_layout Standard
So, to do this I wrote 
\series bold
threads.h
\series default
 and 
\series bold
ui.h
\series default
.
 With these two libraries it is now possible to:
\end_layout

\begin_layout Itemize
Create threads easily -- a thread is a function that will be called frequently,
 who's status can be observed externally, and who can be killed by the implement
ed task manager.
 Threads are easy to create and much easier to maintain than doing similar
 things any other way.
\end_layout

\begin_layout Itemize
Access variables easily : expose_variable(
\begin_inset Quotes eld
\end_inset

myvar
\begin_inset Quotes erd
\end_inset

, name) and you can access it with 
\begin_inset Quotes eld
\end_inset

v myvar
\begin_inset Quotes erd
\end_inset

 on the serial terminal.
\end_layout

\begin_layout Itemize
Call functions: same as exposing variables.
\end_layout

\begin_layout Section*
Overview
\end_layout

\begin_layout Subsection*
The task manager
\end_layout

\begin_layout Standard
Lets start with the coolest bells and whistles.
 
\end_layout

\end_body
\end_document
